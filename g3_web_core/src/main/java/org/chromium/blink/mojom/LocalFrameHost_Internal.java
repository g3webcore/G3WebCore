// LocalFrameHost_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/frame/frame.mojom
//

package org.chromium.blink.mojom;


class LocalFrameHost_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<LocalFrameHost, LocalFrameHost.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<LocalFrameHost, LocalFrameHost.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.LocalFrameHost";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, LocalFrameHost impl) {
            return new Stub(core, impl);
        }

        @Override
        public LocalFrameHost[] buildArray(int size) {
          return new LocalFrameHost[size];
        }
    };


    private static final int ENTER_FULLSCREEN_ORDINAL = 0;

    private static final int EXIT_FULLSCREEN_ORDINAL = 1;

    private static final int FULLSCREEN_STATE_CHANGED_ORDINAL = 2;

    private static final int REGISTER_PROTOCOL_HANDLER_ORDINAL = 3;

    private static final int UNREGISTER_PROTOCOL_HANDLER_ORDINAL = 4;

    private static final int DID_DISPLAY_INSECURE_CONTENT_ORDINAL = 5;

    private static final int DID_CONTAIN_INSECURE_FORM_ACTION_ORDINAL = 6;

    private static final int DOCUMENT_AVAILABLE_IN_MAIN_FRAME_ORDINAL = 7;

    private static final int SET_NEEDS_OCCLUSION_TRACKING_ORDINAL = 8;

    private static final int LIFECYCLE_STATE_CHANGED_ORDINAL = 9;

    private static final int EVICT_FROM_BACK_FORWARD_CACHE_ORDINAL = 10;

    private static final int VISIBILITY_CHANGED_ORDINAL = 11;

    private static final int DID_CHANGE_THEME_COLOR_ORDINAL = 12;

    private static final int DID_FOCUS_FRAME_ORDINAL = 13;

    private static final int ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL = 14;

    private static final int ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL = 15;

    private static final int DID_CHANGE_ACTIVE_SCHEDULER_TRACKED_FEATURES_ORDINAL = 16;

    private static final int SUDDEN_TERMINATION_DISABLER_CHANGED_ORDINAL = 17;

    private static final int HAD_STICKY_USER_ACTIVATION_BEFORE_NAVIGATION_CHANGED_ORDINAL = 18;

    private static final int SCROLL_RECT_TO_VISIBLE_IN_PARENT_FRAME_ORDINAL = 19;

    private static final int BUBBLE_LOGICAL_SCROLL_IN_PARENT_FRAME_ORDINAL = 20;

    private static final int DID_ACCESS_INITIAL_DOCUMENT_ORDINAL = 21;

    private static final int DID_BLOCK_NAVIGATION_ORDINAL = 22;

    private static final int DID_CHANGE_LOAD_PROGRESS_ORDINAL = 23;

    private static final int DISPATCH_LOAD_ORDINAL = 24;

    private static final int GO_TO_ENTRY_AT_OFFSET_ORDINAL = 25;

    private static final int RENDER_FALLBACK_CONTENT_IN_PARENT_PROCESS_ORDINAL = 26;

    private static final int HANDLE_ACCESSIBILITY_FIND_IN_PAGE_RESULT_ORDINAL = 27;

    private static final int HANDLE_ACCESSIBILITY_FIND_IN_PAGE_TERMINATION_ORDINAL = 28;

    private static final int DOCUMENT_ON_LOAD_COMPLETED_ORDINAL = 29;

    private static final int FORWARD_RESOURCE_TIMING_TO_PARENT_ORDINAL = 30;

    private static final int DID_FINISH_DOCUMENT_LOAD_ORDINAL = 31;

    private static final int RUN_MODAL_ALERT_DIALOG_ORDINAL = 32;

    private static final int RUN_MODAL_CONFIRM_DIALOG_ORDINAL = 33;

    private static final int RUN_MODAL_PROMPT_DIALOG_ORDINAL = 34;

    private static final int RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL = 35;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements LocalFrameHost.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void enterFullscreen(
FullscreenOptions options) {

            LocalFrameHostEnterFullscreenParams _message = new LocalFrameHostEnterFullscreenParams();

            _message.options = options;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENTER_FULLSCREEN_ORDINAL)));

        }


        @Override
        public void exitFullscreen(
) {

            LocalFrameHostExitFullscreenParams _message = new LocalFrameHostExitFullscreenParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(EXIT_FULLSCREEN_ORDINAL)));

        }


        @Override
        public void fullscreenStateChanged(
boolean isFullscreen) {

            LocalFrameHostFullscreenStateChangedParams _message = new LocalFrameHostFullscreenStateChangedParams();

            _message.isFullscreen = isFullscreen;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FULLSCREEN_STATE_CHANGED_ORDINAL)));

        }


        @Override
        public void registerProtocolHandler(
String scheme, org.chromium.url.mojom.Url url, org.chromium.mojo_base.mojom.String16 title, boolean userGesture) {

            LocalFrameHostRegisterProtocolHandlerParams _message = new LocalFrameHostRegisterProtocolHandlerParams();

            _message.scheme = scheme;

            _message.url = url;

            _message.title = title;

            _message.userGesture = userGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(REGISTER_PROTOCOL_HANDLER_ORDINAL)));

        }


        @Override
        public void unregisterProtocolHandler(
String scheme, org.chromium.url.mojom.Url url, boolean userGesture) {

            LocalFrameHostUnregisterProtocolHandlerParams _message = new LocalFrameHostUnregisterProtocolHandlerParams();

            _message.scheme = scheme;

            _message.url = url;

            _message.userGesture = userGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(UNREGISTER_PROTOCOL_HANDLER_ORDINAL)));

        }


        @Override
        public void didDisplayInsecureContent(
) {

            LocalFrameHostDidDisplayInsecureContentParams _message = new LocalFrameHostDidDisplayInsecureContentParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_DISPLAY_INSECURE_CONTENT_ORDINAL)));

        }


        @Override
        public void didContainInsecureFormAction(
) {

            LocalFrameHostDidContainInsecureFormActionParams _message = new LocalFrameHostDidContainInsecureFormActionParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CONTAIN_INSECURE_FORM_ACTION_ORDINAL)));

        }


        @Override
        public void documentAvailableInMainFrame(
boolean usesTemporaryZoomLevel) {

            LocalFrameHostDocumentAvailableInMainFrameParams _message = new LocalFrameHostDocumentAvailableInMainFrameParams();

            _message.usesTemporaryZoomLevel = usesTemporaryZoomLevel;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DOCUMENT_AVAILABLE_IN_MAIN_FRAME_ORDINAL)));

        }


        @Override
        public void setNeedsOcclusionTracking(
boolean needsTracking) {

            LocalFrameHostSetNeedsOcclusionTrackingParams _message = new LocalFrameHostSetNeedsOcclusionTrackingParams();

            _message.needsTracking = needsTracking;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SET_NEEDS_OCCLUSION_TRACKING_ORDINAL)));

        }


        @Override
        public void lifecycleStateChanged(
int state) {

            LocalFrameHostLifecycleStateChangedParams _message = new LocalFrameHostLifecycleStateChangedParams();

            _message.state = state;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(LIFECYCLE_STATE_CHANGED_ORDINAL)));

        }


        @Override
        public void evictFromBackForwardCache(
) {

            LocalFrameHostEvictFromBackForwardCacheParams _message = new LocalFrameHostEvictFromBackForwardCacheParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(EVICT_FROM_BACK_FORWARD_CACHE_ORDINAL)));

        }


        @Override
        public void visibilityChanged(
int visibility) {

            LocalFrameHostVisibilityChangedParams _message = new LocalFrameHostVisibilityChangedParams();

            _message.visibility = visibility;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(VISIBILITY_CHANGED_ORDINAL)));

        }


        @Override
        public void didChangeThemeColor(
org.chromium.skia.mojom.SkColor themeColor) {

            LocalFrameHostDidChangeThemeColorParams _message = new LocalFrameHostDidChangeThemeColorParams();

            _message.themeColor = themeColor;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_THEME_COLOR_ORDINAL)));

        }


        @Override
        public void didFocusFrame(
) {

            LocalFrameHostDidFocusFrameParams _message = new LocalFrameHostDidFocusFrameParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_FOCUS_FRAME_ORDINAL)));

        }


        @Override
        public void enforceInsecureRequestPolicy(
byte policyBitmap) {

            LocalFrameHostEnforceInsecureRequestPolicyParams _message = new LocalFrameHostEnforceInsecureRequestPolicyParams();

            _message.policyBitmap = policyBitmap;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL)));

        }


        @Override
        public void enforceInsecureNavigationsSet(
int[] set) {

            LocalFrameHostEnforceInsecureNavigationsSetParams _message = new LocalFrameHostEnforceInsecureNavigationsSetParams();

            _message.set = set;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL)));

        }


        @Override
        public void didChangeActiveSchedulerTrackedFeatures(
long featuresMask) {

            LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams _message = new LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams();

            _message.featuresMask = featuresMask;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_ACTIVE_SCHEDULER_TRACKED_FEATURES_ORDINAL)));

        }


        @Override
        public void suddenTerminationDisablerChanged(
boolean present, int disablerType) {

            LocalFrameHostSuddenTerminationDisablerChangedParams _message = new LocalFrameHostSuddenTerminationDisablerChangedParams();

            _message.present = present;

            _message.disablerType = disablerType;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SUDDEN_TERMINATION_DISABLER_CHANGED_ORDINAL)));

        }


        @Override
        public void hadStickyUserActivationBeforeNavigationChanged(
boolean hasGesture) {

            LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams _message = new LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams();

            _message.hasGesture = hasGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(HAD_STICKY_USER_ACTIVATION_BEFORE_NAVIGATION_CHANGED_ORDINAL)));

        }


        @Override
        public void scrollRectToVisibleInParentFrame(
org.chromium.gfx.mojom.Rect rectToScroll, ScrollIntoViewParams params) {

            LocalFrameHostScrollRectToVisibleInParentFrameParams _message = new LocalFrameHostScrollRectToVisibleInParentFrameParams();

            _message.rectToScroll = rectToScroll;

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(SCROLL_RECT_TO_VISIBLE_IN_PARENT_FRAME_ORDINAL)));

        }


        @Override
        public void bubbleLogicalScrollInParentFrame(
int direction, int granularity) {

            LocalFrameHostBubbleLogicalScrollInParentFrameParams _message = new LocalFrameHostBubbleLogicalScrollInParentFrameParams();

            _message.direction = direction;

            _message.granularity = granularity;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(BUBBLE_LOGICAL_SCROLL_IN_PARENT_FRAME_ORDINAL)));

        }


        @Override
        public void didAccessInitialDocument(
) {

            LocalFrameHostDidAccessInitialDocumentParams _message = new LocalFrameHostDidAccessInitialDocumentParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_ACCESS_INITIAL_DOCUMENT_ORDINAL)));

        }


        @Override
        public void didBlockNavigation(
org.chromium.url.mojom.Url blockedUrl, org.chromium.url.mojom.Url initiatorUrl, int reason) {

            LocalFrameHostDidBlockNavigationParams _message = new LocalFrameHostDidBlockNavigationParams();

            _message.blockedUrl = blockedUrl;

            _message.initiatorUrl = initiatorUrl;

            _message.reason = reason;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_BLOCK_NAVIGATION_ORDINAL)));

        }


        @Override
        public void didChangeLoadProgress(
double loadProgress) {

            LocalFrameHostDidChangeLoadProgressParams _message = new LocalFrameHostDidChangeLoadProgressParams();

            _message.loadProgress = loadProgress;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_CHANGE_LOAD_PROGRESS_ORDINAL)));

        }


        @Override
        public void dispatchLoad(
) {

            LocalFrameHostDispatchLoadParams _message = new LocalFrameHostDispatchLoadParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DISPATCH_LOAD_ORDINAL)));

        }


        @Override
        public void goToEntryAtOffset(
int offset, boolean hasUserGesture) {

            LocalFrameHostGoToEntryAtOffsetParams _message = new LocalFrameHostGoToEntryAtOffsetParams();

            _message.offset = offset;

            _message.hasUserGesture = hasUserGesture;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(GO_TO_ENTRY_AT_OFFSET_ORDINAL)));

        }


        @Override
        public void renderFallbackContentInParentProcess(
) {

            LocalFrameHostRenderFallbackContentInParentProcessParams _message = new LocalFrameHostRenderFallbackContentInParentProcessParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(RENDER_FALLBACK_CONTENT_IN_PARENT_PROCESS_ORDINAL)));

        }


        @Override
        public void handleAccessibilityFindInPageResult(
FindInPageResultAxParams params) {

            LocalFrameHostHandleAccessibilityFindInPageResultParams _message = new LocalFrameHostHandleAccessibilityFindInPageResultParams();

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(HANDLE_ACCESSIBILITY_FIND_IN_PAGE_RESULT_ORDINAL)));

        }


        @Override
        public void handleAccessibilityFindInPageTermination(
) {

            LocalFrameHostHandleAccessibilityFindInPageTerminationParams _message = new LocalFrameHostHandleAccessibilityFindInPageTerminationParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(HANDLE_ACCESSIBILITY_FIND_IN_PAGE_TERMINATION_ORDINAL)));

        }


        @Override
        public void documentOnLoadCompleted(
) {

            LocalFrameHostDocumentOnLoadCompletedParams _message = new LocalFrameHostDocumentOnLoadCompletedParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DOCUMENT_ON_LOAD_COMPLETED_ORDINAL)));

        }


        @Override
        public void forwardResourceTimingToParent(
ResourceTimingInfo timing) {

            LocalFrameHostForwardResourceTimingToParentParams _message = new LocalFrameHostForwardResourceTimingToParentParams();

            _message.timing = timing;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(FORWARD_RESOURCE_TIMING_TO_PARENT_ORDINAL)));

        }


        @Override
        public void didFinishDocumentLoad(
) {

            LocalFrameHostDidFinishDocumentLoadParams _message = new LocalFrameHostDidFinishDocumentLoadParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(DID_FINISH_DOCUMENT_LOAD_ORDINAL)));

        }


        @Override
        public void runModalAlertDialog(
org.chromium.mojo_base.mojom.String16 alertMessage, 
RunModalAlertDialogResponse callback) {

            LocalFrameHostRunModalAlertDialogParams _message = new LocalFrameHostRunModalAlertDialogParams();

            _message.alertMessage = alertMessage;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_ALERT_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostRunModalAlertDialogResponseParamsForwardToCallback(callback));

        }


        @Override
        public void runModalConfirmDialog(
org.chromium.mojo_base.mojom.String16 alertMessage, 
RunModalConfirmDialogResponse callback) {

            LocalFrameHostRunModalConfirmDialogParams _message = new LocalFrameHostRunModalConfirmDialogParams();

            _message.alertMessage = alertMessage;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_CONFIRM_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostRunModalConfirmDialogResponseParamsForwardToCallback(callback));

        }


        @Override
        public void runModalPromptDialog(
org.chromium.mojo_base.mojom.String16 alertMessage, org.chromium.mojo_base.mojom.String16 defaultValue, 
RunModalPromptDialogResponse callback) {

            LocalFrameHostRunModalPromptDialogParams _message = new LocalFrameHostRunModalPromptDialogParams();

            _message.alertMessage = alertMessage;

            _message.defaultValue = defaultValue;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_PROMPT_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostRunModalPromptDialogResponseParamsForwardToCallback(callback));

        }


        @Override
        public void runBeforeUnloadConfirm(
boolean isReload, 
RunBeforeUnloadConfirmResponse callback) {

            LocalFrameHostRunBeforeUnloadConfirmParams _message = new LocalFrameHostRunBeforeUnloadConfirmParams();

            _message.isReload = isReload;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new LocalFrameHostRunBeforeUnloadConfirmResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<LocalFrameHost> {

        Stub(org.chromium.mojo.system.Core core, LocalFrameHost impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                LocalFrameHost_Internal.MANAGER, messageWithHeader);





                    case ENTER_FULLSCREEN_ORDINAL: {

                        LocalFrameHostEnterFullscreenParams data =
                                LocalFrameHostEnterFullscreenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enterFullscreen(data.options);
                        return true;
                    }





                    case EXIT_FULLSCREEN_ORDINAL: {

                        LocalFrameHostExitFullscreenParams.deserialize(messageWithHeader.getPayload());

                        getImpl().exitFullscreen();
                        return true;
                    }





                    case FULLSCREEN_STATE_CHANGED_ORDINAL: {

                        LocalFrameHostFullscreenStateChangedParams data =
                                LocalFrameHostFullscreenStateChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().fullscreenStateChanged(data.isFullscreen);
                        return true;
                    }





                    case REGISTER_PROTOCOL_HANDLER_ORDINAL: {

                        LocalFrameHostRegisterProtocolHandlerParams data =
                                LocalFrameHostRegisterProtocolHandlerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().registerProtocolHandler(data.scheme, data.url, data.title, data.userGesture);
                        return true;
                    }





                    case UNREGISTER_PROTOCOL_HANDLER_ORDINAL: {

                        LocalFrameHostUnregisterProtocolHandlerParams data =
                                LocalFrameHostUnregisterProtocolHandlerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().unregisterProtocolHandler(data.scheme, data.url, data.userGesture);
                        return true;
                    }





                    case DID_DISPLAY_INSECURE_CONTENT_ORDINAL: {

                        LocalFrameHostDidDisplayInsecureContentParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didDisplayInsecureContent();
                        return true;
                    }





                    case DID_CONTAIN_INSECURE_FORM_ACTION_ORDINAL: {

                        LocalFrameHostDidContainInsecureFormActionParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didContainInsecureFormAction();
                        return true;
                    }





                    case DOCUMENT_AVAILABLE_IN_MAIN_FRAME_ORDINAL: {

                        LocalFrameHostDocumentAvailableInMainFrameParams data =
                                LocalFrameHostDocumentAvailableInMainFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().documentAvailableInMainFrame(data.usesTemporaryZoomLevel);
                        return true;
                    }





                    case SET_NEEDS_OCCLUSION_TRACKING_ORDINAL: {

                        LocalFrameHostSetNeedsOcclusionTrackingParams data =
                                LocalFrameHostSetNeedsOcclusionTrackingParams.deserialize(messageWithHeader.getPayload());

                        getImpl().setNeedsOcclusionTracking(data.needsTracking);
                        return true;
                    }





                    case LIFECYCLE_STATE_CHANGED_ORDINAL: {

                        LocalFrameHostLifecycleStateChangedParams data =
                                LocalFrameHostLifecycleStateChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().lifecycleStateChanged(data.state);
                        return true;
                    }





                    case EVICT_FROM_BACK_FORWARD_CACHE_ORDINAL: {

                        LocalFrameHostEvictFromBackForwardCacheParams.deserialize(messageWithHeader.getPayload());

                        getImpl().evictFromBackForwardCache();
                        return true;
                    }





                    case VISIBILITY_CHANGED_ORDINAL: {

                        LocalFrameHostVisibilityChangedParams data =
                                LocalFrameHostVisibilityChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().visibilityChanged(data.visibility);
                        return true;
                    }





                    case DID_CHANGE_THEME_COLOR_ORDINAL: {

                        LocalFrameHostDidChangeThemeColorParams data =
                                LocalFrameHostDidChangeThemeColorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeThemeColor(data.themeColor);
                        return true;
                    }





                    case DID_FOCUS_FRAME_ORDINAL: {

                        LocalFrameHostDidFocusFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didFocusFrame();
                        return true;
                    }





                    case ENFORCE_INSECURE_REQUEST_POLICY_ORDINAL: {

                        LocalFrameHostEnforceInsecureRequestPolicyParams data =
                                LocalFrameHostEnforceInsecureRequestPolicyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enforceInsecureRequestPolicy(data.policyBitmap);
                        return true;
                    }





                    case ENFORCE_INSECURE_NAVIGATIONS_SET_ORDINAL: {

                        LocalFrameHostEnforceInsecureNavigationsSetParams data =
                                LocalFrameHostEnforceInsecureNavigationsSetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().enforceInsecureNavigationsSet(data.set);
                        return true;
                    }





                    case DID_CHANGE_ACTIVE_SCHEDULER_TRACKED_FEATURES_ORDINAL: {

                        LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams data =
                                LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeActiveSchedulerTrackedFeatures(data.featuresMask);
                        return true;
                    }





                    case SUDDEN_TERMINATION_DISABLER_CHANGED_ORDINAL: {

                        LocalFrameHostSuddenTerminationDisablerChangedParams data =
                                LocalFrameHostSuddenTerminationDisablerChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().suddenTerminationDisablerChanged(data.present, data.disablerType);
                        return true;
                    }





                    case HAD_STICKY_USER_ACTIVATION_BEFORE_NAVIGATION_CHANGED_ORDINAL: {

                        LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams data =
                                LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().hadStickyUserActivationBeforeNavigationChanged(data.hasGesture);
                        return true;
                    }





                    case SCROLL_RECT_TO_VISIBLE_IN_PARENT_FRAME_ORDINAL: {

                        LocalFrameHostScrollRectToVisibleInParentFrameParams data =
                                LocalFrameHostScrollRectToVisibleInParentFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().scrollRectToVisibleInParentFrame(data.rectToScroll, data.params);
                        return true;
                    }





                    case BUBBLE_LOGICAL_SCROLL_IN_PARENT_FRAME_ORDINAL: {

                        LocalFrameHostBubbleLogicalScrollInParentFrameParams data =
                                LocalFrameHostBubbleLogicalScrollInParentFrameParams.deserialize(messageWithHeader.getPayload());

                        getImpl().bubbleLogicalScrollInParentFrame(data.direction, data.granularity);
                        return true;
                    }





                    case DID_ACCESS_INITIAL_DOCUMENT_ORDINAL: {

                        LocalFrameHostDidAccessInitialDocumentParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didAccessInitialDocument();
                        return true;
                    }





                    case DID_BLOCK_NAVIGATION_ORDINAL: {

                        LocalFrameHostDidBlockNavigationParams data =
                                LocalFrameHostDidBlockNavigationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didBlockNavigation(data.blockedUrl, data.initiatorUrl, data.reason);
                        return true;
                    }





                    case DID_CHANGE_LOAD_PROGRESS_ORDINAL: {

                        LocalFrameHostDidChangeLoadProgressParams data =
                                LocalFrameHostDidChangeLoadProgressParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didChangeLoadProgress(data.loadProgress);
                        return true;
                    }





                    case DISPATCH_LOAD_ORDINAL: {

                        LocalFrameHostDispatchLoadParams.deserialize(messageWithHeader.getPayload());

                        getImpl().dispatchLoad();
                        return true;
                    }





                    case GO_TO_ENTRY_AT_OFFSET_ORDINAL: {

                        LocalFrameHostGoToEntryAtOffsetParams data =
                                LocalFrameHostGoToEntryAtOffsetParams.deserialize(messageWithHeader.getPayload());

                        getImpl().goToEntryAtOffset(data.offset, data.hasUserGesture);
                        return true;
                    }





                    case RENDER_FALLBACK_CONTENT_IN_PARENT_PROCESS_ORDINAL: {

                        LocalFrameHostRenderFallbackContentInParentProcessParams.deserialize(messageWithHeader.getPayload());

                        getImpl().renderFallbackContentInParentProcess();
                        return true;
                    }





                    case HANDLE_ACCESSIBILITY_FIND_IN_PAGE_RESULT_ORDINAL: {

                        LocalFrameHostHandleAccessibilityFindInPageResultParams data =
                                LocalFrameHostHandleAccessibilityFindInPageResultParams.deserialize(messageWithHeader.getPayload());

                        getImpl().handleAccessibilityFindInPageResult(data.params);
                        return true;
                    }





                    case HANDLE_ACCESSIBILITY_FIND_IN_PAGE_TERMINATION_ORDINAL: {

                        LocalFrameHostHandleAccessibilityFindInPageTerminationParams.deserialize(messageWithHeader.getPayload());

                        getImpl().handleAccessibilityFindInPageTermination();
                        return true;
                    }





                    case DOCUMENT_ON_LOAD_COMPLETED_ORDINAL: {

                        LocalFrameHostDocumentOnLoadCompletedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().documentOnLoadCompleted();
                        return true;
                    }





                    case FORWARD_RESOURCE_TIMING_TO_PARENT_ORDINAL: {

                        LocalFrameHostForwardResourceTimingToParentParams data =
                                LocalFrameHostForwardResourceTimingToParentParams.deserialize(messageWithHeader.getPayload());

                        getImpl().forwardResourceTimingToParent(data.timing);
                        return true;
                    }





                    case DID_FINISH_DOCUMENT_LOAD_ORDINAL: {

                        LocalFrameHostDidFinishDocumentLoadParams.deserialize(messageWithHeader.getPayload());

                        getImpl().didFinishDocumentLoad();
                        return true;
                    }










                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), LocalFrameHost_Internal.MANAGER, messageWithHeader, receiver);







































































                    case RUN_MODAL_ALERT_DIALOG_ORDINAL: {

                        LocalFrameHostRunModalAlertDialogParams data =
                                LocalFrameHostRunModalAlertDialogParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runModalAlertDialog(data.alertMessage, new LocalFrameHostRunModalAlertDialogResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case RUN_MODAL_CONFIRM_DIALOG_ORDINAL: {

                        LocalFrameHostRunModalConfirmDialogParams data =
                                LocalFrameHostRunModalConfirmDialogParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runModalConfirmDialog(data.alertMessage, new LocalFrameHostRunModalConfirmDialogResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case RUN_MODAL_PROMPT_DIALOG_ORDINAL: {

                        LocalFrameHostRunModalPromptDialogParams data =
                                LocalFrameHostRunModalPromptDialogParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runModalPromptDialog(data.alertMessage, data.defaultValue, new LocalFrameHostRunModalPromptDialogResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL: {

                        LocalFrameHostRunBeforeUnloadConfirmParams data =
                                LocalFrameHostRunBeforeUnloadConfirmParams.deserialize(messageWithHeader.getPayload());

                        getImpl().runBeforeUnloadConfirm(data.isReload, new LocalFrameHostRunBeforeUnloadConfirmResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class LocalFrameHostEnterFullscreenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FullscreenOptions options;

        private LocalFrameHostEnterFullscreenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnterFullscreenParams() {
            this(0);
        }

        public static LocalFrameHostEnterFullscreenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnterFullscreenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnterFullscreenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnterFullscreenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnterFullscreenParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.options = FullscreenOptions.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.options, 8, false);
        }
    }



    
    static final class LocalFrameHostExitFullscreenParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostExitFullscreenParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostExitFullscreenParams() {
            this(0);
        }

        public static LocalFrameHostExitFullscreenParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostExitFullscreenParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostExitFullscreenParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostExitFullscreenParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostExitFullscreenParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostFullscreenStateChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isFullscreen;

        private LocalFrameHostFullscreenStateChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostFullscreenStateChangedParams() {
            this(0);
        }

        public static LocalFrameHostFullscreenStateChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostFullscreenStateChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostFullscreenStateChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostFullscreenStateChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostFullscreenStateChangedParams(elementsOrVersion);
                    {
                        
                    result.isFullscreen = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.isFullscreen, 8, 0);
        }
    }



    
    static final class LocalFrameHostRegisterProtocolHandlerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 40;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(40, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String scheme;
        public org.chromium.url.mojom.Url url;
        public org.chromium.mojo_base.mojom.String16 title;
        public boolean userGesture;

        private LocalFrameHostRegisterProtocolHandlerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRegisterProtocolHandlerParams() {
            this(0);
        }

        public static LocalFrameHostRegisterProtocolHandlerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRegisterProtocolHandlerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRegisterProtocolHandlerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRegisterProtocolHandlerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRegisterProtocolHandlerParams(elementsOrVersion);
                    {
                        
                    result.scheme = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.title = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    result.userGesture = decoder0.readBoolean(32, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.scheme, 8, false);
            
            encoder0.encode(this.url, 16, false);
            
            encoder0.encode(this.title, 24, false);
            
            encoder0.encode(this.userGesture, 32, 0);
        }
    }



    
    static final class LocalFrameHostUnregisterProtocolHandlerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String scheme;
        public org.chromium.url.mojom.Url url;
        public boolean userGesture;

        private LocalFrameHostUnregisterProtocolHandlerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostUnregisterProtocolHandlerParams() {
            this(0);
        }

        public static LocalFrameHostUnregisterProtocolHandlerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostUnregisterProtocolHandlerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostUnregisterProtocolHandlerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostUnregisterProtocolHandlerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostUnregisterProtocolHandlerParams(elementsOrVersion);
                    {
                        
                    result.scheme = decoder0.readString(8, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.url = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.userGesture = decoder0.readBoolean(24, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.scheme, 8, false);
            
            encoder0.encode(this.url, 16, false);
            
            encoder0.encode(this.userGesture, 24, 0);
        }
    }



    
    static final class LocalFrameHostDidDisplayInsecureContentParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidDisplayInsecureContentParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidDisplayInsecureContentParams() {
            this(0);
        }

        public static LocalFrameHostDidDisplayInsecureContentParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidDisplayInsecureContentParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidDisplayInsecureContentParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidDisplayInsecureContentParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidDisplayInsecureContentParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDidContainInsecureFormActionParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidContainInsecureFormActionParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidContainInsecureFormActionParams() {
            this(0);
        }

        public static LocalFrameHostDidContainInsecureFormActionParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidContainInsecureFormActionParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidContainInsecureFormActionParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidContainInsecureFormActionParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidContainInsecureFormActionParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDocumentAvailableInMainFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean usesTemporaryZoomLevel;

        private LocalFrameHostDocumentAvailableInMainFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDocumentAvailableInMainFrameParams() {
            this(0);
        }

        public static LocalFrameHostDocumentAvailableInMainFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDocumentAvailableInMainFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDocumentAvailableInMainFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDocumentAvailableInMainFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDocumentAvailableInMainFrameParams(elementsOrVersion);
                    {
                        
                    result.usesTemporaryZoomLevel = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.usesTemporaryZoomLevel, 8, 0);
        }
    }



    
    static final class LocalFrameHostSetNeedsOcclusionTrackingParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean needsTracking;

        private LocalFrameHostSetNeedsOcclusionTrackingParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSetNeedsOcclusionTrackingParams() {
            this(0);
        }

        public static LocalFrameHostSetNeedsOcclusionTrackingParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSetNeedsOcclusionTrackingParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSetNeedsOcclusionTrackingParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSetNeedsOcclusionTrackingParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSetNeedsOcclusionTrackingParams(elementsOrVersion);
                    {
                        
                    result.needsTracking = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.needsTracking, 8, 0);
        }
    }



    
    static final class LocalFrameHostLifecycleStateChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int state;

        private LocalFrameHostLifecycleStateChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostLifecycleStateChangedParams() {
            this(0);
        }

        public static LocalFrameHostLifecycleStateChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostLifecycleStateChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostLifecycleStateChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostLifecycleStateChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostLifecycleStateChangedParams(elementsOrVersion);
                    {
                        
                    result.state = decoder0.readInt(8);
                        FrameLifecycleState.validate(result.state);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.state, 8);
        }
    }



    
    static final class LocalFrameHostEvictFromBackForwardCacheParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostEvictFromBackForwardCacheParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEvictFromBackForwardCacheParams() {
            this(0);
        }

        public static LocalFrameHostEvictFromBackForwardCacheParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEvictFromBackForwardCacheParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEvictFromBackForwardCacheParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEvictFromBackForwardCacheParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEvictFromBackForwardCacheParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostVisibilityChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int visibility;

        private LocalFrameHostVisibilityChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostVisibilityChangedParams() {
            this(0);
        }

        public static LocalFrameHostVisibilityChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostVisibilityChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostVisibilityChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostVisibilityChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostVisibilityChangedParams(elementsOrVersion);
                    {
                        
                    result.visibility = decoder0.readInt(8);
                        FrameVisibility.validate(result.visibility);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.visibility, 8);
        }
    }



    
    static final class LocalFrameHostDidChangeThemeColorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.skia.mojom.SkColor themeColor;

        private LocalFrameHostDidChangeThemeColorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeThemeColorParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeThemeColorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeThemeColorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeThemeColorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeThemeColorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeThemeColorParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, true);
                    result.themeColor = org.chromium.skia.mojom.SkColor.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.themeColor, 8, true);
        }
    }



    
    static final class LocalFrameHostDidFocusFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidFocusFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidFocusFrameParams() {
            this(0);
        }

        public static LocalFrameHostDidFocusFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidFocusFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidFocusFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidFocusFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidFocusFrameParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostEnforceInsecureRequestPolicyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public byte policyBitmap;

        private LocalFrameHostEnforceInsecureRequestPolicyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnforceInsecureRequestPolicyParams() {
            this(0);
        }

        public static LocalFrameHostEnforceInsecureRequestPolicyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnforceInsecureRequestPolicyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnforceInsecureRequestPolicyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnforceInsecureRequestPolicyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnforceInsecureRequestPolicyParams(elementsOrVersion);
                    {
                        
                    result.policyBitmap = decoder0.readByte(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.policyBitmap, 8);
        }
    }



    
    static final class LocalFrameHostEnforceInsecureNavigationsSetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int[] set;

        private LocalFrameHostEnforceInsecureNavigationsSetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostEnforceInsecureNavigationsSetParams() {
            this(0);
        }

        public static LocalFrameHostEnforceInsecureNavigationsSetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostEnforceInsecureNavigationsSetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostEnforceInsecureNavigationsSetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostEnforceInsecureNavigationsSetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostEnforceInsecureNavigationsSetParams(elementsOrVersion);
                    {
                        
                    result.set = decoder0.readInts(8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.set, 8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
        }
    }



    
    static final class LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public long featuresMask;

        private LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeActiveSchedulerTrackedFeaturesParams(elementsOrVersion);
                    {
                        
                    result.featuresMask = decoder0.readLong(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.featuresMask, 8);
        }
    }



    
    static final class LocalFrameHostSuddenTerminationDisablerChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean present;
        public int disablerType;

        private LocalFrameHostSuddenTerminationDisablerChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostSuddenTerminationDisablerChangedParams() {
            this(0);
        }

        public static LocalFrameHostSuddenTerminationDisablerChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostSuddenTerminationDisablerChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostSuddenTerminationDisablerChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostSuddenTerminationDisablerChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostSuddenTerminationDisablerChangedParams(elementsOrVersion);
                    {
                        
                    result.present = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    result.disablerType = decoder0.readInt(12);
                        SuddenTerminationDisablerType.validate(result.disablerType);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.present, 8, 0);
            
            encoder0.encode(this.disablerType, 12);
        }
    }



    
    static final class LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean hasGesture;

        private LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams() {
            this(0);
        }

        public static LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostHadStickyUserActivationBeforeNavigationChangedParams(elementsOrVersion);
                    {
                        
                    result.hasGesture = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.hasGesture, 8, 0);
        }
    }



    
    static final class LocalFrameHostScrollRectToVisibleInParentFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Rect rectToScroll;
        public ScrollIntoViewParams params;

        private LocalFrameHostScrollRectToVisibleInParentFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostScrollRectToVisibleInParentFrameParams() {
            this(0);
        }

        public static LocalFrameHostScrollRectToVisibleInParentFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostScrollRectToVisibleInParentFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostScrollRectToVisibleInParentFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostScrollRectToVisibleInParentFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostScrollRectToVisibleInParentFrameParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.rectToScroll = org.chromium.gfx.mojom.Rect.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.params = ScrollIntoViewParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.rectToScroll, 8, false);
            
            encoder0.encode(this.params, 16, false);
        }
    }



    
    static final class LocalFrameHostBubbleLogicalScrollInParentFrameParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int direction;
        public int granularity;

        private LocalFrameHostBubbleLogicalScrollInParentFrameParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostBubbleLogicalScrollInParentFrameParams() {
            this(0);
        }

        public static LocalFrameHostBubbleLogicalScrollInParentFrameParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostBubbleLogicalScrollInParentFrameParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostBubbleLogicalScrollInParentFrameParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostBubbleLogicalScrollInParentFrameParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostBubbleLogicalScrollInParentFrameParams(elementsOrVersion);
                    {
                        
                    result.direction = decoder0.readInt(8);
                        ScrollDirection.validate(result.direction);
                    }
                    {
                        
                    result.granularity = decoder0.readInt(12);
                        org.chromium.ui.mojom.ScrollGranularity.validate(result.granularity);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.direction, 8);
            
            encoder0.encode(this.granularity, 12);
        }
    }



    
    static final class LocalFrameHostDidAccessInitialDocumentParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidAccessInitialDocumentParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidAccessInitialDocumentParams() {
            this(0);
        }

        public static LocalFrameHostDidAccessInitialDocumentParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidAccessInitialDocumentParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidAccessInitialDocumentParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidAccessInitialDocumentParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidAccessInitialDocumentParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDidBlockNavigationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.url.mojom.Url blockedUrl;
        public org.chromium.url.mojom.Url initiatorUrl;
        public int reason;

        private LocalFrameHostDidBlockNavigationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidBlockNavigationParams() {
            this(0);
        }

        public static LocalFrameHostDidBlockNavigationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidBlockNavigationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidBlockNavigationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidBlockNavigationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidBlockNavigationParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.blockedUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.initiatorUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }
                    {
                        
                    result.reason = decoder0.readInt(24);
                        NavigationBlockedReason.validate(result.reason);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.blockedUrl, 8, false);
            
            encoder0.encode(this.initiatorUrl, 16, false);
            
            encoder0.encode(this.reason, 24);
        }
    }



    
    static final class LocalFrameHostDidChangeLoadProgressParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public double loadProgress;

        private LocalFrameHostDidChangeLoadProgressParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidChangeLoadProgressParams() {
            this(0);
        }

        public static LocalFrameHostDidChangeLoadProgressParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidChangeLoadProgressParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidChangeLoadProgressParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidChangeLoadProgressParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidChangeLoadProgressParams(elementsOrVersion);
                    {
                        
                    result.loadProgress = decoder0.readDouble(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.loadProgress, 8);
        }
    }



    
    static final class LocalFrameHostDispatchLoadParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDispatchLoadParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDispatchLoadParams() {
            this(0);
        }

        public static LocalFrameHostDispatchLoadParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDispatchLoadParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDispatchLoadParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDispatchLoadParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDispatchLoadParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostGoToEntryAtOffsetParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int offset;
        public boolean hasUserGesture;

        private LocalFrameHostGoToEntryAtOffsetParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostGoToEntryAtOffsetParams() {
            this(0);
        }

        public static LocalFrameHostGoToEntryAtOffsetParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostGoToEntryAtOffsetParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostGoToEntryAtOffsetParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostGoToEntryAtOffsetParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostGoToEntryAtOffsetParams(elementsOrVersion);
                    {
                        
                    result.offset = decoder0.readInt(8);
                    }
                    {
                        
                    result.hasUserGesture = decoder0.readBoolean(12, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.offset, 8);
            
            encoder0.encode(this.hasUserGesture, 12, 0);
        }
    }



    
    static final class LocalFrameHostRenderFallbackContentInParentProcessParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostRenderFallbackContentInParentProcessParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRenderFallbackContentInParentProcessParams() {
            this(0);
        }

        public static LocalFrameHostRenderFallbackContentInParentProcessParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRenderFallbackContentInParentProcessParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRenderFallbackContentInParentProcessParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRenderFallbackContentInParentProcessParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRenderFallbackContentInParentProcessParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostHandleAccessibilityFindInPageResultParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public FindInPageResultAxParams params;

        private LocalFrameHostHandleAccessibilityFindInPageResultParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostHandleAccessibilityFindInPageResultParams() {
            this(0);
        }

        public static LocalFrameHostHandleAccessibilityFindInPageResultParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostHandleAccessibilityFindInPageResultParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostHandleAccessibilityFindInPageResultParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostHandleAccessibilityFindInPageResultParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostHandleAccessibilityFindInPageResultParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.params = FindInPageResultAxParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.params, 8, false);
        }
    }



    
    static final class LocalFrameHostHandleAccessibilityFindInPageTerminationParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostHandleAccessibilityFindInPageTerminationParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostHandleAccessibilityFindInPageTerminationParams() {
            this(0);
        }

        public static LocalFrameHostHandleAccessibilityFindInPageTerminationParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostHandleAccessibilityFindInPageTerminationParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostHandleAccessibilityFindInPageTerminationParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostHandleAccessibilityFindInPageTerminationParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostHandleAccessibilityFindInPageTerminationParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostDocumentOnLoadCompletedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDocumentOnLoadCompletedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDocumentOnLoadCompletedParams() {
            this(0);
        }

        public static LocalFrameHostDocumentOnLoadCompletedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDocumentOnLoadCompletedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDocumentOnLoadCompletedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDocumentOnLoadCompletedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDocumentOnLoadCompletedParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostForwardResourceTimingToParentParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public ResourceTimingInfo timing;

        private LocalFrameHostForwardResourceTimingToParentParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostForwardResourceTimingToParentParams() {
            this(0);
        }

        public static LocalFrameHostForwardResourceTimingToParentParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostForwardResourceTimingToParentParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostForwardResourceTimingToParentParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostForwardResourceTimingToParentParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostForwardResourceTimingToParentParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.timing = ResourceTimingInfo.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.timing, 8, false);
        }
    }



    
    static final class LocalFrameHostDidFinishDocumentLoadParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostDidFinishDocumentLoadParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostDidFinishDocumentLoadParams() {
            this(0);
        }

        public static LocalFrameHostDidFinishDocumentLoadParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostDidFinishDocumentLoadParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostDidFinishDocumentLoadParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostDidFinishDocumentLoadParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostDidFinishDocumentLoadParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }



    
    static final class LocalFrameHostRunModalAlertDialogParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 alertMessage;

        private LocalFrameHostRunModalAlertDialogParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalAlertDialogParams() {
            this(0);
        }

        public static LocalFrameHostRunModalAlertDialogParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalAlertDialogParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalAlertDialogParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalAlertDialogParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalAlertDialogParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.alertMessage = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.alertMessage, 8, false);
        }
    }



    
    static final class LocalFrameHostRunModalAlertDialogResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];

        private LocalFrameHostRunModalAlertDialogResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalAlertDialogResponseParams() {
            this(0);
        }

        public static LocalFrameHostRunModalAlertDialogResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalAlertDialogResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalAlertDialogResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalAlertDialogResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalAlertDialogResponseParams(elementsOrVersion);

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    }

    static class LocalFrameHostRunModalAlertDialogResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.RunModalAlertDialogResponse mCallback;

        LocalFrameHostRunModalAlertDialogResponseParamsForwardToCallback(LocalFrameHost.RunModalAlertDialogResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_MODAL_ALERT_DIALOG_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                mCallback.call();
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostRunModalAlertDialogResponseParamsProxyToResponder implements LocalFrameHost.RunModalAlertDialogResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostRunModalAlertDialogResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call() {
            LocalFrameHostRunModalAlertDialogResponseParams _response = new LocalFrameHostRunModalAlertDialogResponseParams();

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_ALERT_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostRunModalConfirmDialogParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 alertMessage;

        private LocalFrameHostRunModalConfirmDialogParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalConfirmDialogParams() {
            this(0);
        }

        public static LocalFrameHostRunModalConfirmDialogParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalConfirmDialogParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalConfirmDialogParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalConfirmDialogParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalConfirmDialogParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.alertMessage = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.alertMessage, 8, false);
        }
    }



    
    static final class LocalFrameHostRunModalConfirmDialogResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;

        private LocalFrameHostRunModalConfirmDialogResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalConfirmDialogResponseParams() {
            this(0);
        }

        public static LocalFrameHostRunModalConfirmDialogResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalConfirmDialogResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalConfirmDialogResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalConfirmDialogResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalConfirmDialogResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
        }
    }

    static class LocalFrameHostRunModalConfirmDialogResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.RunModalConfirmDialogResponse mCallback;

        LocalFrameHostRunModalConfirmDialogResponseParamsForwardToCallback(LocalFrameHost.RunModalConfirmDialogResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_MODAL_CONFIRM_DIALOG_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                LocalFrameHostRunModalConfirmDialogResponseParams response = LocalFrameHostRunModalConfirmDialogResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostRunModalConfirmDialogResponseParamsProxyToResponder implements LocalFrameHost.RunModalConfirmDialogResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostRunModalConfirmDialogResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success) {
            LocalFrameHostRunModalConfirmDialogResponseParams _response = new LocalFrameHostRunModalConfirmDialogResponseParams();

            _response.success = success;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_CONFIRM_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostRunModalPromptDialogParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo_base.mojom.String16 alertMessage;
        public org.chromium.mojo_base.mojom.String16 defaultValue;

        private LocalFrameHostRunModalPromptDialogParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalPromptDialogParams() {
            this(0);
        }

        public static LocalFrameHostRunModalPromptDialogParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalPromptDialogParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalPromptDialogParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalPromptDialogParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalPromptDialogParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.alertMessage = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.defaultValue = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.alertMessage, 8, false);
            
            encoder0.encode(this.defaultValue, 16, false);
        }
    }



    
    static final class LocalFrameHostRunModalPromptDialogResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;
        public org.chromium.mojo_base.mojom.String16 result;

        private LocalFrameHostRunModalPromptDialogResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunModalPromptDialogResponseParams() {
            this(0);
        }

        public static LocalFrameHostRunModalPromptDialogResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunModalPromptDialogResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunModalPromptDialogResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunModalPromptDialogResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunModalPromptDialogResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.result = org.chromium.mojo_base.mojom.String16.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
            
            encoder0.encode(this.result, 16, false);
        }
    }

    static class LocalFrameHostRunModalPromptDialogResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.RunModalPromptDialogResponse mCallback;

        LocalFrameHostRunModalPromptDialogResponseParamsForwardToCallback(LocalFrameHost.RunModalPromptDialogResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_MODAL_PROMPT_DIALOG_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                LocalFrameHostRunModalPromptDialogResponseParams response = LocalFrameHostRunModalPromptDialogResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success, response.result);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostRunModalPromptDialogResponseParamsProxyToResponder implements LocalFrameHost.RunModalPromptDialogResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostRunModalPromptDialogResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success, org.chromium.mojo_base.mojom.String16 result) {
            LocalFrameHostRunModalPromptDialogResponseParams _response = new LocalFrameHostRunModalPromptDialogResponseParams();

            _response.success = success;

            _response.result = result;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_MODAL_PROMPT_DIALOG_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class LocalFrameHostRunBeforeUnloadConfirmParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean isReload;

        private LocalFrameHostRunBeforeUnloadConfirmParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunBeforeUnloadConfirmParams() {
            this(0);
        }

        public static LocalFrameHostRunBeforeUnloadConfirmParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunBeforeUnloadConfirmParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunBeforeUnloadConfirmParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunBeforeUnloadConfirmParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunBeforeUnloadConfirmParams(elementsOrVersion);
                    {
                        
                    result.isReload = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.isReload, 8, 0);
        }
    }



    
    static final class LocalFrameHostRunBeforeUnloadConfirmResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;

        private LocalFrameHostRunBeforeUnloadConfirmResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public LocalFrameHostRunBeforeUnloadConfirmResponseParams() {
            this(0);
        }

        public static LocalFrameHostRunBeforeUnloadConfirmResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static LocalFrameHostRunBeforeUnloadConfirmResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static LocalFrameHostRunBeforeUnloadConfirmResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            LocalFrameHostRunBeforeUnloadConfirmResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new LocalFrameHostRunBeforeUnloadConfirmResponseParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
        }
    }

    static class LocalFrameHostRunBeforeUnloadConfirmResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final LocalFrameHost.RunBeforeUnloadConfirmResponse mCallback;

        LocalFrameHostRunBeforeUnloadConfirmResponseParamsForwardToCallback(LocalFrameHost.RunBeforeUnloadConfirmResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                LocalFrameHostRunBeforeUnloadConfirmResponseParams response = LocalFrameHostRunBeforeUnloadConfirmResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.success);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class LocalFrameHostRunBeforeUnloadConfirmResponseParamsProxyToResponder implements LocalFrameHost.RunBeforeUnloadConfirmResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        LocalFrameHostRunBeforeUnloadConfirmResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Boolean success) {
            LocalFrameHostRunBeforeUnloadConfirmResponseParams _response = new LocalFrameHostRunBeforeUnloadConfirmResponseParams();

            _response.success = success;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    RUN_BEFORE_UNLOAD_CONFIRM_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
