// EmbeddedWorkerStartParams.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/service_worker/embedded_worker.mojom
//

package org.chromium.blink.mojom;


public final class EmbeddedWorkerStartParams extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 144;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(144, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public long serviceWorkerVersionId;
    public org.chromium.url.mojom.Url scope;
    public org.chromium.url.mojom.Url scriptUrl;
    public int scriptType;
    public FetchClientSettingsObject outsideFetchClientSettingsObject;
    public String userAgent;
    public int serviceWorkerRouteId;
    public org.chromium.mojo_base.mojom.UnguessableToken devtoolsWorkerToken;
    public boolean pauseAfterDownload;
    public org.chromium.url.mojom.Url scriptUrlToSkipThrottling;
    public boolean waitForDebugger;
    public boolean isInstalled;
    public RendererPreferences rendererPreferences;
    public org.chromium.mojo.bindings.InterfaceRequest<ServiceWorker> serviceWorkerReceiver;
    public org.chromium.mojo.bindings.InterfaceRequest<ControllerServiceWorker> controllerReceiver;
    public ServiceWorkerInstalledScriptsInfo installedScriptsInfo;
    public org.chromium.mojo.bindings.AssociatedInterfaceNotSupported instanceHost;
    public ServiceWorkerProviderInfoForStartWorker providerInfo;
    public WorkerContentSettingsProxy contentSettingsProxy;
    public org.chromium.mojo.bindings.InterfaceRequest<RendererPreferenceWatcher> preferenceWatcherReceiver;
    public UrlLoaderFactoryBundle subresourceLoaderFactories;
    public org.chromium.mojo.bindings.InterfaceRequest<SubresourceLoaderUpdater> subresourceLoaderUpdater;

    private EmbeddedWorkerStartParams(int version) {
        super(STRUCT_SIZE, version);
    }

    public EmbeddedWorkerStartParams() {
        this(0);
    }

    public static EmbeddedWorkerStartParams deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static EmbeddedWorkerStartParams deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static EmbeddedWorkerStartParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        EmbeddedWorkerStartParams result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new EmbeddedWorkerStartParams(elementsOrVersion);
                {
                    
                result.serviceWorkerVersionId = decoder0.readLong(8);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                result.scope = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                result.scriptUrl = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                result.scriptType = decoder0.readInt(32);
                    ScriptType.validate(result.scriptType);
                }
                {
                    
                result.serviceWorkerRouteId = decoder0.readInt(36);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                result.outsideFetchClientSettingsObject = FetchClientSettingsObject.decode(decoder1);
                }
                {
                    
                result.userAgent = decoder0.readString(48, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, false);
                result.devtoolsWorkerToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                }
                {
                    
                result.pauseAfterDownload = decoder0.readBoolean(64, 0);
                }
                {
                    
                result.waitForDebugger = decoder0.readBoolean(64, 1);
                }
                {
                    
                result.isInstalled = decoder0.readBoolean(64, 2);
                }
                {
                    
                result.serviceWorkerReceiver = decoder0.readInterfaceRequest(68, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, false);
                result.scriptUrlToSkipThrottling = org.chromium.url.mojom.Url.decode(decoder1);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(80, false);
                result.rendererPreferences = RendererPreferences.decode(decoder1);
                }
                {
                    
                result.controllerReceiver = decoder0.readInterfaceRequest(88, false);
                }
                {
                    
                result.preferenceWatcherReceiver = decoder0.readInterfaceRequest(92, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(96, true);
                result.installedScriptsInfo = ServiceWorkerInstalledScriptsInfo.decode(decoder1);
                }
                {
                    
                result.instanceHost = decoder0.readAssociatedServiceInterfaceNotSupported(104, false);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(112, false);
                result.providerInfo = ServiceWorkerProviderInfoForStartWorker.decode(decoder1);
                }
                {
                    
                result.contentSettingsProxy = decoder0.readServiceInterface(120, false, WorkerContentSettingsProxy.MANAGER);
                }
                {
                    
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(128, false);
                result.subresourceLoaderFactories = UrlLoaderFactoryBundle.decode(decoder1);
                }
                {
                    
                result.subresourceLoaderUpdater = decoder0.readInterfaceRequest(136, false);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.serviceWorkerVersionId, 8);
        
        encoder0.encode(this.scope, 16, false);
        
        encoder0.encode(this.scriptUrl, 24, false);
        
        encoder0.encode(this.scriptType, 32);
        
        encoder0.encode(this.serviceWorkerRouteId, 36);
        
        encoder0.encode(this.outsideFetchClientSettingsObject, 40, false);
        
        encoder0.encode(this.userAgent, 48, false);
        
        encoder0.encode(this.devtoolsWorkerToken, 56, false);
        
        encoder0.encode(this.pauseAfterDownload, 64, 0);
        
        encoder0.encode(this.waitForDebugger, 64, 1);
        
        encoder0.encode(this.isInstalled, 64, 2);
        
        encoder0.encode(this.serviceWorkerReceiver, 68, false);
        
        encoder0.encode(this.scriptUrlToSkipThrottling, 72, false);
        
        encoder0.encode(this.rendererPreferences, 80, false);
        
        encoder0.encode(this.controllerReceiver, 88, false);
        
        encoder0.encode(this.preferenceWatcherReceiver, 92, false);
        
        encoder0.encode(this.installedScriptsInfo, 96, true);
        
        encoder0.encode(this.instanceHost, 104, false);
        
        encoder0.encode(this.providerInfo, 112, false);
        
        encoder0.encode(this.contentSettingsProxy, 120, false, WorkerContentSettingsProxy.MANAGER);
        
        encoder0.encode(this.subresourceLoaderFactories, 128, false);
        
        encoder0.encode(this.subresourceLoaderUpdater, 136, false);
    }
}