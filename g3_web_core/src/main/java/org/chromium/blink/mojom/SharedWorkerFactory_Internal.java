// SharedWorkerFactory_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/blink/public/mojom/worker/shared_worker_factory.mojom
//

package org.chromium.blink.mojom;


class SharedWorkerFactory_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<SharedWorkerFactory, SharedWorkerFactory.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<SharedWorkerFactory, SharedWorkerFactory.Proxy>() {

        @Override
        public String getName() {
            return "blink.mojom.SharedWorkerFactory";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, SharedWorkerFactory impl) {
            return new Stub(core, impl);
        }

        @Override
        public SharedWorkerFactory[] buildArray(int size) {
          return new SharedWorkerFactory[size];
        }
    };


    private static final int CREATE_SHARED_WORKER_ORDINAL = 0;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements SharedWorkerFactory.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void createSharedWorker(
SharedWorkerInfo info, String userAgent, boolean pauseOnStart, org.chromium.mojo_base.mojom.UnguessableToken devtoolsWorkerToken, RendererPreferences rendererPreferences, org.chromium.mojo.bindings.InterfaceRequest<RendererPreferenceWatcher> preferenceWatcherReceiver, WorkerContentSettingsProxy contentSettings, ServiceWorkerProviderInfoForClient serviceWorkerProviderInfo, org.chromium.mojo_base.mojom.UnguessableToken appcacheHostId, WorkerMainScriptLoadParams mainScriptLoadParams, UrlLoaderFactoryBundle subresourceLoaderFactories, ControllerServiceWorkerInfo controllerInfo, SharedWorkerHost host, org.chromium.mojo.bindings.InterfaceRequest<SharedWorker> sharedWorker, BrowserInterfaceBroker browserInterfaceBroker) {

            SharedWorkerFactoryCreateSharedWorkerParams _message = new SharedWorkerFactoryCreateSharedWorkerParams();

            _message.info = info;

            _message.userAgent = userAgent;

            _message.pauseOnStart = pauseOnStart;

            _message.devtoolsWorkerToken = devtoolsWorkerToken;

            _message.rendererPreferences = rendererPreferences;

            _message.preferenceWatcherReceiver = preferenceWatcherReceiver;

            _message.contentSettings = contentSettings;

            _message.serviceWorkerProviderInfo = serviceWorkerProviderInfo;

            _message.appcacheHostId = appcacheHostId;

            _message.mainScriptLoadParams = mainScriptLoadParams;

            _message.subresourceLoaderFactories = subresourceLoaderFactories;

            _message.controllerInfo = controllerInfo;

            _message.host = host;

            _message.sharedWorker = sharedWorker;

            _message.browserInterfaceBroker = browserInterfaceBroker;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_SHARED_WORKER_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<SharedWorkerFactory> {

        Stub(org.chromium.mojo.system.Core core, SharedWorkerFactory impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                SharedWorkerFactory_Internal.MANAGER, messageWithHeader);





                    case CREATE_SHARED_WORKER_ORDINAL: {

                        SharedWorkerFactoryCreateSharedWorkerParams data =
                                SharedWorkerFactoryCreateSharedWorkerParams.deserialize(messageWithHeader.getPayload());

                        getImpl().createSharedWorker(data.info, data.userAgent, data.pauseOnStart, data.devtoolsWorkerToken, data.rendererPreferences, data.preferenceWatcherReceiver, data.contentSettings, data.serviceWorkerProviderInfo, data.appcacheHostId, data.mainScriptLoadParams, data.subresourceLoaderFactories, data.controllerInfo, data.host, data.sharedWorker, data.browserInterfaceBroker);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), SharedWorkerFactory_Internal.MANAGER, messageWithHeader, receiver);




                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class SharedWorkerFactoryCreateSharedWorkerParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 120;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(120, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public SharedWorkerInfo info;
        public String userAgent;
        public boolean pauseOnStart;
        public org.chromium.mojo_base.mojom.UnguessableToken devtoolsWorkerToken;
        public RendererPreferences rendererPreferences;
        public org.chromium.mojo.bindings.InterfaceRequest<RendererPreferenceWatcher> preferenceWatcherReceiver;
        public WorkerContentSettingsProxy contentSettings;
        public ServiceWorkerProviderInfoForClient serviceWorkerProviderInfo;
        public org.chromium.mojo_base.mojom.UnguessableToken appcacheHostId;
        public WorkerMainScriptLoadParams mainScriptLoadParams;
        public UrlLoaderFactoryBundle subresourceLoaderFactories;
        public ControllerServiceWorkerInfo controllerInfo;
        public SharedWorkerHost host;
        public org.chromium.mojo.bindings.InterfaceRequest<SharedWorker> sharedWorker;
        public BrowserInterfaceBroker browserInterfaceBroker;

        private SharedWorkerFactoryCreateSharedWorkerParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public SharedWorkerFactoryCreateSharedWorkerParams() {
            this(0);
        }

        public static SharedWorkerFactoryCreateSharedWorkerParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static SharedWorkerFactoryCreateSharedWorkerParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static SharedWorkerFactoryCreateSharedWorkerParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            SharedWorkerFactoryCreateSharedWorkerParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new SharedWorkerFactoryCreateSharedWorkerParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.info = SharedWorkerInfo.decode(decoder1);
                    }
                    {
                        
                    result.userAgent = decoder0.readString(16, false);
                    }
                    {
                        
                    result.pauseOnStart = decoder0.readBoolean(24, 0);
                    }
                    {
                        
                    result.preferenceWatcherReceiver = decoder0.readInterfaceRequest(28, false);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(32, false);
                    result.devtoolsWorkerToken = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(40, false);
                    result.rendererPreferences = RendererPreferences.decode(decoder1);
                    }
                    {
                        
                    result.contentSettings = decoder0.readServiceInterface(48, false, WorkerContentSettingsProxy.MANAGER);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(56, true);
                    result.serviceWorkerProviderInfo = ServiceWorkerProviderInfoForClient.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(64, true);
                    result.appcacheHostId = org.chromium.mojo_base.mojom.UnguessableToken.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(72, false);
                    result.mainScriptLoadParams = WorkerMainScriptLoadParams.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(80, false);
                    result.subresourceLoaderFactories = UrlLoaderFactoryBundle.decode(decoder1);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(88, true);
                    result.controllerInfo = ControllerServiceWorkerInfo.decode(decoder1);
                    }
                    {
                        
                    result.host = decoder0.readServiceInterface(96, false, SharedWorkerHost.MANAGER);
                    }
                    {
                        
                    result.sharedWorker = decoder0.readInterfaceRequest(104, false);
                    }
                    {
                        
                    result.browserInterfaceBroker = decoder0.readServiceInterface(108, false, BrowserInterfaceBroker.MANAGER);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.info, 8, false);
            
            encoder0.encode(this.userAgent, 16, false);
            
            encoder0.encode(this.pauseOnStart, 24, 0);
            
            encoder0.encode(this.preferenceWatcherReceiver, 28, false);
            
            encoder0.encode(this.devtoolsWorkerToken, 32, false);
            
            encoder0.encode(this.rendererPreferences, 40, false);
            
            encoder0.encode(this.contentSettings, 48, false, WorkerContentSettingsProxy.MANAGER);
            
            encoder0.encode(this.serviceWorkerProviderInfo, 56, true);
            
            encoder0.encode(this.appcacheHostId, 64, true);
            
            encoder0.encode(this.mainScriptLoadParams, 72, false);
            
            encoder0.encode(this.subresourceLoaderFactories, 80, false);
            
            encoder0.encode(this.controllerInfo, 88, true);
            
            encoder0.encode(this.host, 96, false, SharedWorkerHost.MANAGER);
            
            encoder0.encode(this.sharedWorker, 104, false);
            
            encoder0.encode(this.browserInterfaceBroker, 108, false, BrowserInterfaceBroker.MANAGER);
        }
    }



}
