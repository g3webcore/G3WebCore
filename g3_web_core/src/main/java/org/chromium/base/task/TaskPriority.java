
// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     java_cpp_enum.py
// From
//     ../../base/task/task_traits.h

package org.chromium.base.task;

import androidx.annotation.IntDef;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

@IntDef({
    TaskPriority.LOWEST, TaskPriority.BEST_EFFORT, TaskPriority.USER_VISIBLE,
    TaskPriority.USER_BLOCKING, TaskPriority.HIGHEST
})
@Retention(RetentionPolicy.SOURCE)
public @interface TaskPriority {
  /**
   * This will always be equal to the lowest priority available.
   */
  int LOWEST = 0;
  /**
   * This task will only start running when machine resources are available. The application may
   * preempt the task if it expects that resources will soon be needed by work of higher priority.
   * Dependending on the ThreadPolicy, the task may run on a thread that is likely to be descheduled
   * when higher priority work arrives (in this process or another). Examples: - Reporting metrics.
   * - Persisting data to disk. - Loading data that is required for a potential future user
   * interaction (Note: Use CreateUpdateableSequencedTaskRunner() to increase the priority when that
   * user interactions happens).
   */
  int BEST_EFFORT = 0;
  /**
   * The result of this task is visible to the user (in the UI or as a side-effect on the system)
   * but it is not an immediate response to a user interaction. Examples: - Updating the UI to
   * reflect progress on a long task. - Downloading a file requested by the user. - Loading an image
   * that is displayed in the UI but is non-critical.
   */
  int USER_VISIBLE = 1;
  /**
   * This task affects UI immediately after a user interaction. Example: - Loading and rendering a
   * web page after the user clicks a link. - Sorting suggestions after the user types a character
   * in the omnibox.
   */
  int USER_BLOCKING = 2;
  /**
   * This will always be equal to the highest priority available.
   */
  int HIGHEST = 2;
}
